package com.paperclip.controller;

import com.paperclip.service.UserService;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

/*
 * get user own (create): userPaper, userNote, userDoc, userInfo, userFans
 * include
 *      get userPaper, userNote, userDoc, userInfo( user's selfinfo), messages info
 *      delete userNote, userDoc
 *      modify userInfo(e.g. password)
 *      send message
 * .js
 *      UserDocPage
 *      UserDocDetailPage
 *      UserFensPage
 *      UserNotePage
 *      UserModifyDocPage
 *      UserModifyNotePage
 *      UserPage
 *      UserSettingPage
 *      WriteDocPage
 *      HomePage
 *
 */
@CrossOrigin
@RestController
public class UserInfoController {

    @Autowired
    UserService userService;

    /************************************************** doc ********************************************/

    /****************
     * userDocPage  *
     ****************/
    // get user's own doc according to username( by docID, all versions of one doc only appear once )
    @RequestMapping(value = "/service/userDoc",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONArray getUserDoc(@RequestBody JSONObject data){
        return userService.getUserDoc(data);
    }

    // user want to delete all versions of this doc
    @RequestMapping(value = "/service/delete/doc",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject deleteDoc( @RequestBody JSONObject data){
        return userService.deleteUserDoc(data);
    }

    /************************
     * userDocDetailPage
     ***********************/
    // get user's one doc, all versions( by docID)
    @RequestMapping(value = "/service/docDetail",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONArray viewDocDetail(@RequestBody JSONObject data){
        return userService.getUserDocDetail(data);
    }
    // user want to delete particular versions of this doc
    @RequestMapping(value = "/service/delete/docVersion",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject deleteDocVersion( @RequestBody JSONObject data){
        return userService.deleteUserDocVersion(data);
    }

    /**************************
     *  userModifyDocPage
     *************************/
    // return the latest version
    @RequestMapping(value = "/service/modify/docDetail",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject getDocDetail(@RequestBody JSONObject data){
        return userService.getDocDetail(data);
    }

    // save this doc ( date and version number are generated by backend)
    @RequestMapping(value = "/service/save/doc",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject saveDoc(@RequestBody JSONObject data){
        return userService.saveDoc(data);
    }

    // add a contributer to this doc
    @RequestMapping(value = "/service/addDocContributer",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject addDocContributer(@RequestBody JSONObject data){
        return userService.addDocContributer(data);
    }

    // get all docs that this user contributes ( data should contains username)
    @RequestMapping(value = "/service/contributeDoc",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONArray getContributeDoc(@RequestBody JSONObject data){
        return userService.getContributeDoc(data);
    }

    /*************************
     * writeDocPage
     ************************/
    // add a new doc
    @RequestMapping(value = "/service/addDoc",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject addDoc(@RequestBody JSONObject data){
        return userService.addDoc(data);
    }

    /************************************************ fans *************************************************/
    /*****************
    *  userFensPage
    ********************/
    @RequestMapping(value = "/service/userFans",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONArray getUserFans(@RequestBody JSONObject data){
        return userService.getUserFans(data);
    }

    /********************************************* note ****************************************************/
    /*******************
     * userNotePage
     *******************/
    // get user's own note according to username
    @RequestMapping(value = "/service/userNote",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONArray getUserNote(@RequestBody JSONObject data){
        return userService.getUserNote(data);
    }

    // user want to delete this note
    @RequestMapping(value = "/service/delete/note",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject deleteNote(@RequestBody JSONObject data){
        return userService.deleteUserNote(data);
    }


    /************************
     * userModifyNotePage
     ************************/
    @RequestMapping(value = "/service/modify/noteDetail",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject getNoteDetail(@RequestBody JSONObject data){
        return userService.getNoteDetail(data);
    }

    @RequestMapping(value = "/service/save/note",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject saveNote(@RequestBody JSONObject data){
        return userService.saveNote(data);
    }

    /*********************
     * viewNotePage
     ********************/

    @RequestMapping(value = "/service/noteDetail",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject viewNoteDetail(@RequestBody JSONObject data){
        return userService.getViewNoteDetail(data);
    }

    /***************************************************** user ************************************************************/
    /*
     * userPage
     */
    // get user own user page info
    @RequestMapping(value = "/service/hostInfo",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject getHostInfo(@RequestBody JSONObject data){
        return userService.getHostInfo(data);
    }

    // get other user page info
    @RequestMapping(value = "/service/clientInfo",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject getClientInfo(@RequestBody JSONObject data){
        return userService.getClientInfo(data);
    }

    /***************************
     * userSettingPage
     *****************************/
    @RequestMapping(value = "/service/modify/userinfo",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONObject modifyUserInfo(@RequestBody JSONObject data){
        return userService.modifyUserInfo(data);
    }

    /********************************************** home ************************************************/
    /****************
     * homePage
     **************/
    @RequestMapping(value = "/service/homeinfo",method = RequestMethod.POST)
    public
    @ResponseBody
    JSONArray getHomeInfo(@RequestBody JSONObject data){
        return userService.getHomeInfo(data);
    }
}
